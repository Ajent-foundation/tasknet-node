import { app, BrowserWindow, Menu, nativeImage, Tray } from 'electron';
import path from 'path';

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

const appIconPath = app.isPackaged 
    ? path.join(process.resourcesPath, "icon.png")
    : path.join(__dirname, "..", "..", "images", "icon.png");

const appIconTrayPath = app.isPackaged 
    ? path.join(process.resourcesPath, "iconWhite.png")
    : path.join(__dirname, "..", "..", "images", "iconWhite.png");

export function createWindow() {
    const image = nativeImage.createFromPath(
        appIconPath,
    );

    // Set dock icon for macOS
    if (process.platform === 'darwin') {
        app.dock.setIcon(image);
    }

    // Create the browser window.
    const mainWindow = new BrowserWindow({
        height: 900,
        width: 1280,
        title: "TaskNet Node",
        autoHideMenuBar: true,
        icon: image,
        webPreferences: {
            preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
            nodeIntegration: false,
            contextIsolation: true,
            webSecurity: true,
        },
        resizable: true,
        maximizable: true,
        fullscreenable: true,
        center: true
    });
    
    // Add this after window creation but before loading the URL
    // This is to prevent CSP errors
    mainWindow.webContents.session.webRequest.onHeadersReceived(
        (details, callback) => {
            callback({
                responseHeaders: {
                    ...details.responseHeaders,
                    'Content-Security-Policy': [
                        "default-src 'self' 'unsafe-inline' data: static: https: http: ws: wss:; script-src 'self' 'unsafe-inline' 'unsafe-eval'; manifest-src 'self' static:;"
                    ]
                }
            }
        );
    });
  
    // Prevent window from being closed
    mainWindow.on('close', function (event) {
        if (process.platform === 'darwin') {
            app.dock.hide()
        }
        if (!app.isQuitting) {
            event.preventDefault();
            mainWindow?.hide();
            return false;
        } 
    })
  
    // Handle minimize behavior
    mainWindow.on('will-resize', function (event, newBounds) {
        if (newBounds.width < 1280 || newBounds.height < 900) {
            event.preventDefault();
        }
    })
  
    // and load the index.html of the app.
    mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
  
    // If you want to completely remove the menu
    mainWindow.setMenu(null)
    Menu.setApplicationMenu(null);
  
    // Open the DevTools.
    // Open DevTools only in development
    if (process.env.NODE_ENV === 'development') {
        mainWindow.webContents.openDevTools({
            mode: 'detach'
        });
    }

    return mainWindow
};
  
export function createTray(window: BrowserWindow, callback: (newWindow: BrowserWindow) => void) {
    const image = nativeImage.createFromPath(
        appIconTrayPath,
    );
    const tray = new Tray(image.resize({ width: 16, height: 16 }));
    
    // Create context menu
    const contextMenu = Menu.buildFromTemplate([
        {
            label: 'Go to Dashboard',
            click: function () {
                showWindow(window, callback)
            }
        },
        { type: 'separator' },
        {
            label: 'Quit',
            click: function () {
                app.isQuitting = true
                app.quit()
            }
        }
    ])
  
    // Set tray properties
    tray.setToolTip('TaskNet Node')
    tray.setContextMenu(contextMenu)
  
    // Optional: Double click on tray icon to show window
    tray.on('double-click', () => showWindow(window, callback))
    return tray
}
  
export function showWindow(window: BrowserWindow, callback: (newWindow: BrowserWindow) => void) {
    if (process.platform === 'darwin') {
        const image = nativeImage.createFromPath(
            appIconPath,
        );
        app.dock.show();
        app.dock.setIcon(image);
    }
    
    if (!window) {
        window = createWindow();
        //window.setIcon(appIconPath);
    } else {
        if (window.isMinimized()) window.restore();
        window.show();
        window.focus();
    }
    callback(window);
}